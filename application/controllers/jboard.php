<?php

class Jboard_Controller extends Base_Controller {


	public $restful = true;

	public function __construct()
	{
    	$this->filter('before','jboardOnly');
	}

	public function get_index()
	{
		

		$openAppeals = Appeal::where('appealStatus', '=', '0')->count();
		$closedAppeals = Appeal::where('appealStatus', '=', '1')->count();

		$view = View::make('jboard.index');
		$view->url = URL::to_action('appeal@new');
		$view->openAppeals = $openAppeals;
		$view->closedAppeals = $closedAppeals;
		$view->title = "JBoard Dashboard";
		return $view;
	}


	//returns a listing of un-reviewed appeals and allows the jboard to select an appeal to review.
	public function get_openappeals(){
		//$this->filter('before','jboardOnly');

		$openAppeals = Appeal::where('appealStatus', '=', '0')->get();

		$view = View::make('jboard.openappeals')
			->with('openappeals', $openAppeals);
		$view->title = "Open Appeals";
		return $view;

	}


	//returns a listing of reviewed appeals and allows the jboard to select an appeal to review.
	//used to only see which appeals have been reviewed/closed
	public function get_closedappeals(){
		//$this->filter('before','jboardOnly');

		$openAppeals = Appeal::where('appealStatus', '=', '1')->get();

		$view = View::make('jboard.closedappeals')
			->with('openappeals', $openAppeals);
		$view->title = "Closed Appeals";
		return $view;

	}

	public function get_review($ticketID){

		//$this->filter('before','jboardOnly');

		//let's check to see if the appeal has already been reviewed
		$rulingsForTicket = Ruling::where('ticketID', '=', $ticketID)->count();

		if($rulingsForTicket > 0){
			return Redirect::to('jboard/')
				->with('alertMessage', 'This ticket has already been reviewed. Please select another ticket.');
		}

		//if it passes, let's get the ticket info for review
		$appeals = Appeal::where('ticketID', '=', $ticketID)->first();

		
			// echo "You have access to this ticket! Hooray!<br>";
			// echo "The ticket id of this ticket is ".$appeals->ticketid;
			$view = View::make('jboard.review')
				->with('appeals', $appeals);
			$view->title = "Reviewing Open Appeal";
		
		return $view;
			
	}

	public function post_review(){
		$this->filter('before','jboardOnly');
	

		$input = Input::all(); //grab our input
		$rules = array(
			'decision'   => 'required',
			'denyreason' => 'required',
			'initials'   => 'required|alpha|min:2',
			'amtreduce'  => 'numeric',
			'details'    => 'required'

		); //validation rules

		$validation = Validator::make($input, $rules); //let's run the validator

		if ($validation->fails())
    	{
        	return Redirect::to('jboard/review/'.Input::get('ticketid'))->with_errors($validation);
    	}

    	//insert ruling into database
		Ruling::create(array(
			'decision'   => Input::get('decision'),
			'denyreason' => Input::get('denyreason'),
			'reasoning'  => Input::get('details'),
			'intials'    => Input::get('initials'),
			'CWID'       => Input::get('cwid'),
			'amtReduce'  => Input::get('amtreduce'),
			'ticketID'   => Input::get('ticketid')
		));


		//let's close the ticket now
		$close = DB::table('tickets')
				->where('ticketID', '=', Input::get('ticketid'))
				->update(array('appealStatus' => '1'));

		return Redirect::to('jboard/')
			->with('alertMessage', 'Ruling submitted successfully.');

	

	DB::table('tickets')
				->where('ticketID', '=', Input::get('ticketid'))
				->update(array('appealStatus' => '1'));

		/////////////////////
		// Now we're going to email the appellant to let them know that their appeal has been reviewed. 
		/////////////////////

		// Get the Swift Mailer instance
		$mailer = IoC::resolve('mailer');

		//set the appellant's email address using CWID
		$email = Input::get('cwid').'@marist.edu';

		//set html body of email
		$body = "This autogenerated email is to let you know that your appeal has been reviewed and closed by the Justice Board. Please login to the Online Parking Appeal System at <a href='http://sga.marist.edu/parkingappeals/'>http://sga.marist.edu/parkingappeals/</a>. Please do not reply to this message. <br><br> Thank you, <br> Student Government Association Justice Board";

		// Construct the message
		$message = Swift_Message::newInstance('[Marist SGA] Your Parking Appeal Has Been Reviewed')
		    ->setFrom(array('sga.judicial@marist.edu'=>'SGA Judicial Board'))
		    ->setTo(array($email => 'Appellant'))
		    ->addPart('This email is autogenerated to let you know that your appeal has been reviewed by the Justice Board. Please login to the Online Parking Appeal System at http://sga.marist.edu/parkingappeals to review the decision. ','text/plain')
		    ->setBody($body,'text/html');

		// Send the email
		$mailer->send($message);

		return Redirect::to('jboard/')
			->with('alertMessage', 'Ruling submitted successfully.');
	}

	public function get_reviewclosed($ticketID){

		//$this->filter('before','jboardOnly');
		
		$appeals = Appeal::where('ticketID', '=', $ticketID)->first();
		$rulings = Ruling::where('ticketID', '=', $ticketID)->first();


			$denyReasonsArray = array('none' => '', 'incomplete' => 'Incomplete/Illegible', 'past' => 'Past Due', 'nobasis' => 'No Basis for Appeal', 'insufficient' => 'Insufficient Evidence', 'other' => 'Other (specify)');

			$view = View::make('jboard.reviewclosed')
				->with('appeals', $appeals)
				->with('rulings', $rulings)
				->with('denyReason', $denyReasonsArray[$rulings->denyreason]);
			$view->title = "Review Appeal";
		
		return $view;

	}


	public function get_report(){

		$lastsubmit = DB::table('stats')->where('id', '=', '1')->first();

		$view = View::make('jboard.report')
				->with('title', 'Generate Appeal Report')
				->with('lastsubmit', $lastsubmit);
		return $view;

	}

	public function post_report(){
		//use this section for functionality that allows jboard to send the report of approved parking appeals every week over to security
		//use a php -> CSV converter and call a mysql query that just looks for the appeals that were approved within X amount of days

		//simple query to update our last submit 
		DB::query("UPDATE stats SET lastsubmit = NOW() WHERE id=1");

		//what this query does:
		//  select ticket ID and CWID from the rulings table, then get the person's name from the tickets table. We have to join these tables because we are taking from two tables without a specific where clause. 
		//  We then only take the tickets that have been approved
		//  And then from there, take only the tickets that were done within the past week. 

		//may need to add in a check to make sure nothing gets left out...
		$closedAppeals = DB::query("SELECT rulings.ticketID, rulings.CWID, rulings.amtReduce, tickets.name, tickets.lastName FROM rulings LEFT JOIN tickets ON tickets.ticketID = rulings.ticketID WHERE ( decision = 'approved' ) AND ( rulings.created_at >= curdate( ) - INTERVAL DAYOFWEEK( curdate( ) ) +6 DAY)");

		$data = '"ticketID","CWID","First Name","Last Name","Amount Reduced"' . "\n";

		foreach($closedAppeals as $closedAppeal) {
			$data .= sprintf('"%s","%s","%s","%s","%s"',
			$closedAppeal->ticketid,
			$closedAppeal->cwid,
			$closedAppeal->name,
			$closedAppeal->lastname,
			$closedAppeal->amtreduce
			) . "\n";
		}


		//create filename with current date
		$filename = 'ticketappeals-' . date('Ymd'). '.csv';

		return Response::make($data, 200, array(
		'Content-Description' => 'File Transfer',
		'Content-Type' => File::mime('csv'),
		'Content-Disposition' => 'attachment; filename="'. $filename . '"',
		'Content-Transfer-Encoding' => 'binary',
		'Expires' => 0,
		'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
		'Pragma' => 'public',
		'Content-Length' => strlen($data)
		));


	}

}